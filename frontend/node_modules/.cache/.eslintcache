[{"C:\\Users\\Dell\\Desktop\\crud\\frontend\\src\\index.js":"1","C:\\Users\\Dell\\Desktop\\crud\\frontend\\src\\App.js":"2","C:\\Users\\Dell\\Desktop\\crud\\frontend\\src\\components\\Form.js":"3","C:\\Users\\Dell\\Desktop\\crud\\frontend\\src\\components\\Userlist.js":"4"},{"size":544,"mtime":1682234567755,"results":"5","hashOfConfig":"6"},{"size":218,"mtime":1682234623173,"results":"7","hashOfConfig":"6"},{"size":3592,"mtime":1690377604925,"results":"8","hashOfConfig":"6"},{"size":3425,"mtime":1690379793349,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"1atso03",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"C:\\Users\\Dell\\Desktop\\crud\\frontend\\src\\index.js",[],[],[],"C:\\Users\\Dell\\Desktop\\crud\\frontend\\src\\App.js",[],[],"C:\\Users\\Dell\\Desktop\\crud\\frontend\\src\\components\\Form.js",[],[],"C:\\Users\\Dell\\Desktop\\crud\\frontend\\src\\components\\Userlist.js",["24","25"],[],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport const Userlist = () => {\r\n  const [userData, setUserData] = useState(null);\r\n\r\n  const fetchUserData = async () => {\r\n    const resp = await axios.get(\"/getUsers\");\r\n    console.log(resp);\r\n\r\n    //if NO users are there please don't set the values\r\n    if (resp.data.users.length > 0) {\r\n      setUserData(resp.data.users);\r\n    }\r\n  };\r\n\r\n  //to load the data before the page got refresh\r\n  useEffect(() => {\r\n    fetchUserData();\r\n  }, [userData]);\r\n\r\n  //edit\r\n  const handleedit = async (user) => {\r\n    const userName = prompt(\"Enter your new name\");\r\n    const userEmail = prompt(\"Enter the new mail\");\r\n\r\n    if (!userName || !userEmail) {\r\n      alert(\"please Enter Name and Email Both\");\r\n    } else {\r\n      const resp = await axios.put(`editUser/${user._id}`, {\r\n        name: userName,\r\n        email: userEmail,\r\n      });\r\n      // console.log(resp);\r\n    }\r\n  };\r\n\r\n  //delete=\r\n  const handledelete = async (userId) => {\r\n    // console.log(userId);\r\n    const resp = await axios.delete(`/deleteUser/${userId}`);\r\n    // console.log(resp);\r\n  };\r\n\r\n  return (\r\n    <section className=\"text-gray-600 body-font\">\r\n      <div className=\"container px-5 py-24 mx-auto\">\r\n        <div className=\"flex flex-col text-center w-full mb-8\">\r\n          <h1 className=\"sm:text-4xl text-3xl font-medium title-font mb-2 text-gray-900\">\r\n            All Users\r\n          </h1>\r\n        </div>\r\n        <div className=\"lg:w-2/3 w-full mx-auto overflow-auto\">\r\n          <table className=\"table-auto w-full text-left whitespace-no-wrap\">\r\n            <thead>\r\n              <tr>\r\n                <th className=\"px-4 py-3 title-font tracking-wider font-medium text-gray-900 text-sm bg-gray-100 rounded-tl rounded-bl\">\r\n                  Name\r\n                </th>\r\n                <th className=\"px-4 py-3 title-font tracking-wider font-medium text-gray-900 text-sm bg-gray-100\">\r\n                  Email\r\n                </th>\r\n                <th className=\"px-4 py-3 title-font tracking-wider font-medium text-gray-900 text-sm bg-gray-100\">\r\n                  Edit\r\n                </th>\r\n                <th className=\"px-4 py-3 title-font tracking-wider font-medium text-gray-900 text-sm bg-gray-100\">\r\n                  Delete\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {userData &&\r\n                userData.map((user) => (\r\n                  <tr>\r\n                    <td className=\"px-4 py-3\">{user.name} </td>\r\n                    <td className=\"px-4 py-3\">{user.email}</td>\r\n                    <td className=\"px-4 py-3\">\r\n                      <button\r\n                        className=\"hover:text-green-500\"\r\n                        onClick={() => handleedit(user)}\r\n                      >\r\n                        Edit\r\n                      </button>\r\n                    </td>\r\n                    <td className=\"px-4 py-3 text-lg text-gray-900\">\r\n                      <button\r\n                        className=\"hover:text-red-500\"\r\n                        onClick={() => handledelete(user._id)}\r\n                      >\r\n                        Delete\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n",{"ruleId":"26","severity":1,"message":"27","line":30,"column":13,"nodeType":"28","messageId":"29","endLine":30,"endColumn":17},{"ruleId":"26","severity":1,"message":"27","line":41,"column":11,"nodeType":"28","messageId":"29","endLine":41,"endColumn":15},"no-unused-vars","'resp' is assigned a value but never used.","Identifier","unusedVar"]